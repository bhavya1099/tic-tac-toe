// ********RoostGPT********
// Test generated by RoostGPT for test java-customannotation-test using AI Type  and AI Model 



// ********RoostGPT********
import calculateWinner from '../../../src/helpers/calculateWinner';

describe('calculateWinner Tests', () => {
    test('should correctly identify the winner', () => {
        const squares = ['X', 'X', 'X', null, null, null, null, null, null];
        expect(calculateWinner(squares)).toBe('X');
    });

    test('should return null when there is no winner', () => {
        const squares = ['X', 'O', 'X', 'X', 'O', 'O', null, null, null];
        expect(calculateWinner(squares)).toBeNull();
    });

    test('should handle incomplete boards', () => {
        const squares = ['X', 'O', null, null, 'O', null, 'X', null, null];
        expect(calculateWinner(squares)).toBeNull();
    });

    test('should return null for an empty board', () => {
        const squares = Array(9).fill(null);
        expect(calculateWinner(squares)).toBeNull();
    });

    test('should handle incorrect inputs gracefully', () => {
        expect(calculateWinner(undefined)).toBeNull();
        expect(calculateWinner([1, 2, 3])).toBeNull();
    });

    test('should identify all possible winning lines', () => {
        const lines = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],
            [2, 4, 6],
        ];

        lines.forEach(line => {
            const squares = Array(9).fill(null);
            squares[line[0]] = 'O';
            squares[line[1]] = 'O';
            squares[line[2]] = 'O';
            expect(calculateWinner(squares)).toBe('O');
        });
    });
});

